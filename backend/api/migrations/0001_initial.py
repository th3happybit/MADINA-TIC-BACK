# Generated by Django 3.0.5 on 2020-05-01 03:22

import api.models
import datetime
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(blank=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, null=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=200)),
                ('role', models.CharField(choices=[('Client', 'Client'), ('Admin', 'Admin'), ('Maire', 'Maire'), ('Service', 'Service')], default='Client', max_length=200)),
                ('date_of_birth', models.DateField(default=datetime.date.today)),
                ('address', models.CharField(max_length=200)),
                ('image', models.ImageField(blank=True, null=True, upload_to=api.models.wrapperuser)),
                ('is_approved', models.BooleanField(default=False, help_text='Designates whether this user should be treated as approved. ', verbose_name='approved')),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Announce',
            fields=[
                ('aid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('desc', models.TextField()),
                ('status', models.CharField(choices=[('published', 'published'), ('modified', 'modified'), ('removed', 'removed'), ('archived', 'archived')], default='published', max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Declaration',
            fields=[
                ('did', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('desc', models.TextField()),
                ('address', models.CharField(max_length=200)),
                ('geo_cord', models.CharField(max_length=200)),
                ('status', models.CharField(choices=[('not_validated', 'not_validated'), ('lack_of_info', 'lack_of_info'), ('validated', 'validated'), ('refused', 'refused'), ('under_treatment', 'under_treatment'), ('treated', 'treated'), ('archived', 'archived')], default='not_validated', max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(blank=True, null=True)),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
                ('citizen', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declarations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeclarationType',
            fields=[
                ('dtid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('rid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('desc', models.TextField()),
                ('status', models.CharField(choices=[('not_validated', 'not_validated'), ('lack_of_info', 'lack_of_info'), ('work_not_finished', 'work_not_finished'), ('validated', 'validated'), ('refused', 'refused'), ('archived', 'archived')], default='not_validated', max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(blank=True, null=True)),
                ('validated_at', models.DateTimeField(blank=True, null=True)),
                ('declaration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='report', to='api.Declaration')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReportRejection',
            fields=[
                ('rrid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('maire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_rejections', to=settings.AUTH_USER_MODEL)),
                ('report', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rejection', to='api.Report')),
            ],
        ),
        migrations.CreateModel(
            name='ReportComplementDemand',
            fields=[
                ('rcid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('maire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_complement_demands', to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complement_demands', to='api.Report')),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('dmid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filetype', models.CharField(choices=[('pdf', 'pdf'), ('image', 'image'), ('other', 'other')], default='other', max_length=200)),
                ('src', models.FileField(upload_to=api.models.wrapper)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('declaration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='api.Declaration')),
            ],
        ),
        migrations.CreateModel(
            name='DeclarationRejection',
            fields=[
                ('drid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('declaration', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rejection', to='api.Declaration')),
                ('maire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declarations_rejections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DeclarationComplementDemand',
            fields=[
                ('dcid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reason', models.CharField(max_length=200)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('declaration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='complement_demands', to='api.Declaration')),
                ('maire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declarations_complement_demands', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='declaration',
            name='dtype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='declarations', to='api.DeclarationType'),
        ),
    ]
